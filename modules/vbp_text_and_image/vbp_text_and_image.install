<?php

/**
 * @file
 * Install, uninstall and update hooks for VBP text and image module.
 */

use Symfony\Component\Yaml\Yaml;
use Drupal\Core\Config;
use Drupal\Core\Config\InstallStorage;
use Drupal\Core\Config\StorageInterface;
use Drupal\Core\Config\ExtensionInstallStorage;
use Drupal\Core\Config\FileStorage;

/**
 * Implements hook_install().
 */
function vbp_text_and_image_install() {
  
  $module_name = preg_replace('/_install$/', '', __FUNCTION__);
  $module_path = Drupal::service('module_handler')->getModule($module_name)->getPath();

  // Processer for install: in [$module_name].info.yml file.
  // ---------------------------------------------------------------------------
  $module_info_file = $module_path . '/'. $module_name . '.info.yml';
  if (file_exists($module_info_file)) {
    $module_info_data = (array) Yaml::parse(file_get_contents($module_info_file));
    if (isset($module_info_data['install'])
      && is_array($module_info_data['install'])) {
      \Drupal::service('module_installer')->install($module_info_data['install'], TRUE);
    }
  }

  // Install optional configs.
  $optional_install_path = $module_path . '/' . InstallStorage::CONFIG_OPTIONAL_DIRECTORY;
  if (is_dir($optional_install_path)) {
    $config_installer = \Drupal::service('config.installer');
    $config_installer->installDefaultConfig('module', $module_name);
    // Install any optional config the module provides.
    $storage = new FileStorage($optional_install_path, StorageInterface::DEFAULT_COLLECTION);
    $config_installer->installOptionalConfig($storage, '');
  }
  // ---------------------------------------------------------------------------

}

/**
 * Issue #2904173: Changed [Background Color] in the Styling Settings to use
 * a set of Color set to choose with [Color boxes] with a general color settings
 */
function vbp_text_and_image_update_8001() {
  $config_install_path = drupal_get_path('module', 'varbase_bootstrap_paragraphs') . '/config/install/';

  $configs['core.entity_form_display.paragraph.text_and_image.default'] = $config_install_path . 'core.entity_form_display.paragraph.text_and_image.default.yml';

  foreach ($configs as $name => $config_path) {
    $data = (array) Yaml::parse($config_path);
    $config = \Drupal::configFactory()->getEditable($name);
    $config->setData($data)->save(TRUE);
  }
}